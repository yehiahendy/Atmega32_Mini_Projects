
Garage System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000998  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000aa  008000aa  00000a76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ef  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  00002523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e03  00000000  00000000  00002f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00003d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006da  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d1  00000000  00000000  000047e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_1>
   8:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_2>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	f9 01       	movw	r30, r18
  56:	12 02       	muls	r17, r18
  58:	2b 02       	muls	r18, r27
  5a:	44 02       	muls	r20, r20
  5c:	5c 02       	muls	r21, r28
  5e:	5c 02       	muls	r21, r28
  60:	5c 02       	muls	r21, r28
  62:	5c 02       	muls	r21, r28
  64:	5c 02       	muls	r21, r28
  66:	5c 02       	muls	r21, r28
  68:	5c 02       	muls	r21, r28
  6a:	5c 02       	muls	r21, r28
  6c:	5c 02       	muls	r21, r28
  6e:	5c 02       	muls	r21, r28
  70:	5c 02       	muls	r21, r28
  72:	5c 02       	muls	r21, r28
  74:	5c 02       	muls	r21, r28
  76:	5c 02       	muls	r21, r28
  78:	5c 02       	muls	r21, r28
  7a:	5c 02       	muls	r21, r28
  7c:	5c 02       	muls	r21, r28
  7e:	5c 02       	muls	r21, r28
  80:	5c 02       	muls	r21, r28
  82:	5c 02       	muls	r21, r28
  84:	5c 02       	muls	r21, r28
  86:	5c 02       	muls	r21, r28
  88:	5c 02       	muls	r21, r28
  8a:	5c 02       	muls	r21, r28
  8c:	5c 02       	muls	r21, r28
  8e:	5c 02       	muls	r21, r28
  90:	5c 02       	muls	r21, r28
  92:	5c 02       	muls	r21, r28
  94:	f9 01       	movw	r30, r18
  96:	12 02       	muls	r17, r18
  98:	2b 02       	muls	r18, r27
  9a:	44 02       	muls	r20, r20
  9c:	69 02       	muls	r22, r25
  9e:	82 02       	muls	r24, r18
  a0:	9b 02       	muls	r25, r27
  a2:	b4 02       	muls	r27, r20
  a4:	cc 02       	muls	r28, r28
  a6:	cc 02       	muls	r28, r28
  a8:	cc 02       	muls	r28, r28
  aa:	cc 02       	muls	r28, r28
  ac:	cc 02       	muls	r28, r28
  ae:	cc 02       	muls	r28, r28
  b0:	cc 02       	muls	r28, r28
  b2:	cc 02       	muls	r28, r28
  b4:	cc 02       	muls	r28, r28
  b6:	cc 02       	muls	r28, r28
  b8:	cc 02       	muls	r28, r28
  ba:	cc 02       	muls	r28, r28
  bc:	cc 02       	muls	r28, r28
  be:	cc 02       	muls	r28, r28
  c0:	cc 02       	muls	r28, r28
  c2:	cc 02       	muls	r28, r28
  c4:	cc 02       	muls	r28, r28
  c6:	cc 02       	muls	r28, r28
  c8:	cc 02       	muls	r28, r28
  ca:	cc 02       	muls	r28, r28
  cc:	cc 02       	muls	r28, r28
  ce:	cc 02       	muls	r28, r28
  d0:	cc 02       	muls	r28, r28
  d2:	cc 02       	muls	r28, r28
  d4:	cc 02       	muls	r28, r28
  d6:	cc 02       	muls	r28, r28
  d8:	cc 02       	muls	r28, r28
  da:	cc 02       	muls	r28, r28
  dc:	69 02       	muls	r22, r25
  de:	82 02       	muls	r24, r18
  e0:	9b 02       	muls	r25, r27
  e2:	b4 02       	muls	r27, r20
  e4:	d8 02       	muls	r29, r24
  e6:	e0 02       	muls	r30, r16
  e8:	e8 02       	muls	r30, r24
  ea:	f0 02       	muls	r31, r16
  ec:	f7 02       	muls	r31, r23
  ee:	f7 02       	muls	r31, r23
  f0:	f7 02       	muls	r31, r23
  f2:	f7 02       	muls	r31, r23
  f4:	f7 02       	muls	r31, r23
  f6:	f7 02       	muls	r31, r23
  f8:	f7 02       	muls	r31, r23
  fa:	f7 02       	muls	r31, r23
  fc:	f7 02       	muls	r31, r23
  fe:	f7 02       	muls	r31, r23
 100:	f7 02       	muls	r31, r23
 102:	f7 02       	muls	r31, r23
 104:	f7 02       	muls	r31, r23
 106:	f7 02       	muls	r31, r23
 108:	f7 02       	muls	r31, r23
 10a:	f7 02       	muls	r31, r23
 10c:	f7 02       	muls	r31, r23
 10e:	f7 02       	muls	r31, r23
 110:	f7 02       	muls	r31, r23
 112:	f7 02       	muls	r31, r23
 114:	f7 02       	muls	r31, r23
 116:	f7 02       	muls	r31, r23
 118:	f7 02       	muls	r31, r23
 11a:	f7 02       	muls	r31, r23
 11c:	f7 02       	muls	r31, r23
 11e:	f7 02       	muls	r31, r23
 120:	f7 02       	muls	r31, r23
 122:	f7 02       	muls	r31, r23
 124:	d8 02       	muls	r29, r24
 126:	e0 02       	muls	r30, r16
 128:	e8 02       	muls	r30, r24
 12a:	f0 02       	muls	r31, r16
 12c:	03 03       	mulsu	r16, r19
 12e:	0d 03       	fmul	r16, r21
 130:	17 03       	mulsu	r17, r23
 132:	21 03       	mulsu	r18, r17
 134:	2a 03       	fmul	r18, r18
 136:	2a 03       	fmul	r18, r18
 138:	2a 03       	fmul	r18, r18
 13a:	2a 03       	fmul	r18, r18
 13c:	2a 03       	fmul	r18, r18
 13e:	2a 03       	fmul	r18, r18
 140:	2a 03       	fmul	r18, r18
 142:	2a 03       	fmul	r18, r18
 144:	2a 03       	fmul	r18, r18
 146:	2a 03       	fmul	r18, r18
 148:	2a 03       	fmul	r18, r18
 14a:	2a 03       	fmul	r18, r18
 14c:	2a 03       	fmul	r18, r18
 14e:	2a 03       	fmul	r18, r18
 150:	2a 03       	fmul	r18, r18
 152:	2a 03       	fmul	r18, r18
 154:	2a 03       	fmul	r18, r18
 156:	2a 03       	fmul	r18, r18
 158:	2a 03       	fmul	r18, r18
 15a:	2a 03       	fmul	r18, r18
 15c:	2a 03       	fmul	r18, r18
 15e:	2a 03       	fmul	r18, r18
 160:	2a 03       	fmul	r18, r18
 162:	2a 03       	fmul	r18, r18
 164:	2a 03       	fmul	r18, r18
 166:	2a 03       	fmul	r18, r18
 168:	2a 03       	fmul	r18, r18
 16a:	2a 03       	fmul	r18, r18
 16c:	03 03       	mulsu	r16, r19
 16e:	0d 03       	fmul	r16, r21
 170:	17 03       	mulsu	r17, r23
 172:	21 03       	mulsu	r18, r17

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e8 e9       	ldi	r30, 0x98	; 152
 188:	f9 e0       	ldi	r31, 0x09	; 9
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	aa 3a       	cpi	r26, 0xAA	; 170
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	aa ea       	ldi	r26, 0xAA	; 170
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	ab 3a       	cpi	r26, 0xAB	; 171
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 a3 03 	call	0x746	; 0x746 <main>
 1aa:	0c 94 ca 04 	jmp	0x994	; 0x994 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <LCD_kick>:
for(i=0;i<8;i++)
{
	LCD_SendData(a_NewShape[i]);
}
	
}
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 1bc:	00 00       	nop
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 1c8:	08 95       	ret

000001ca <LCD_SendCommand>:
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e4       	ldi	r24, 0x42	; 66
 1de:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 1e2:	6c 2f       	mov	r22, r28
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 cd 02 	call	0x59a	; 0x59a <Dio_WriteHighNibbleVal>
 1ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_kick>
 1ee:	6c 2f       	mov	r22, r28
 1f0:	62 95       	swap	r22
 1f2:	60 7f       	andi	r22, 0xF0	; 240
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	0e 94 cd 02 	call	0x59a	; 0x59a <Dio_WriteHighNibbleVal>
 1fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_kick>
 1fe:	83 ec       	ldi	r24, 0xC3	; 195
 200:	99 e0       	ldi	r25, 0x09	; 9
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_SendCommand+0x38>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_SendCommand+0x3e>
 208:	00 00       	nop
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <LCD_init>:
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_WritePinDir>
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_WritePinDir>
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_WritePinDir>
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Dio_WriteHighNibbleDir>
 234:	85 ea       	ldi	r24, 0xA5	; 165
 236:	9e e0       	ldi	r25, 0x0E	; 14
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_init+0x2a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_init+0x30>
 23e:	00 00       	nop
 240:	83 e3       	ldi	r24, 0x33	; 51
 242:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 264:	08 95       	ret

00000266 <LCD_SendData>:
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	82 e4       	ldi	r24, 0x42	; 66
 270:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	82 e4       	ldi	r24, 0x42	; 66
 27a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 27e:	6c 2f       	mov	r22, r28
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 cd 02 	call	0x59a	; 0x59a <Dio_WriteHighNibbleVal>
 286:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_kick>
 28a:	6c 2f       	mov	r22, r28
 28c:	62 95       	swap	r22
 28e:	60 7f       	andi	r22, 0xF0	; 240
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 cd 02 	call	0x59a	; 0x59a <Dio_WriteHighNibbleVal>
 296:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_kick>
 29a:	83 ec       	ldi	r24, 0xC3	; 195
 29c:	99 e0       	ldi	r25, 0x09	; 9
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_SendData+0x38>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_SendData+0x3e>
 2a4:	00 00       	nop
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_WriteString>:
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	59 f0       	breq	.+22     	; 0x2ce <LCD_WriteString+0x24>
 2b8:	8f 01       	movw	r16, r30
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendData>
 2c0:	cf 5f       	subi	r28, 0xFF	; 255
 2c2:	f8 01       	movw	r30, r16
 2c4:	ec 0f       	add	r30, r28
 2c6:	f1 1d       	adc	r31, r1
 2c8:	80 81       	ld	r24, Z
 2ca:	81 11       	cpse	r24, r1
 2cc:	f7 cf       	rjmp	.-18     	; 0x2bc <LCD_WriteString+0x12>
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <LCD_clearScreen>:
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 2dc:	08 95       	ret

000002de <LCD_GotoXY>:
 2de:	81 11       	cpse	r24, r1
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <LCD_GotoXY+0xe>
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	86 0f       	add	r24, r22
 2e6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 2ea:	08 95       	ret
 2ec:	80 ec       	ldi	r24, 0xC0	; 192
 2ee:	86 0f       	add	r24, r22
 2f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
 2f4:	08 95       	ret

000002f6 <LCD_SendNumber>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	60 97       	sbiw	r28, 0x10	; 16
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	4a e0       	ldi	r20, 0x0A	; 10
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	be 01       	movw	r22, r28
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	0e 94 8a 04 	call	0x914	; 0x914 <itoa>
 318:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
 31c:	60 96       	adiw	r28, 0x10	; 16
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_Move_Right>:

void LCD_Move_Right(uint8 string[])
{
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
	for (uint8 i = 0 ; i < 16 - strlen(string) ;i++)
 33a:	f1 2c       	mov	r15, r1
 33c:	00 e1       	ldi	r16, 0x10	; 16
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	13 c0       	rjmp	.+38     	; 0x368 <LCD_Move_Right+0x3a>
}
void LCD_GotoXY(uint8 x, uint8 y)
{
	if (x == 0)
	{
		LCD_SendCommand(LCD_BEGIN_AT_FIRST_RAW + y);
 342:	80 e8       	ldi	r24, 0x80	; 128
 344:	8f 0d       	add	r24, r15
 346:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
void LCD_Move_Right(uint8 string[])
{
	for (uint8 i = 0 ; i < 16 - strlen(string) ;i++)
	{
		LCD_GotoXY(0,i);
		LCD_WriteString(string);
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 350:	2f e9       	ldi	r18, 0x9F	; 159
 352:	86 e8       	ldi	r24, 0x86	; 134
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <LCD_Move_Right+0x28>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_Move_Right+0x32>
 360:	00 00       	nop
		_delay_ms(500);
		LCD_clearScreen();
 362:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
	
}

void LCD_Move_Right(uint8 string[])
{
	for (uint8 i = 0 ; i < 16 - strlen(string) ;i++)
 366:	f3 94       	inc	r15
 368:	fe 01       	movw	r30, r28
 36a:	01 90       	ld	r0, Z+
 36c:	00 20       	and	r0, r0
 36e:	e9 f7       	brne	.-6      	; 0x36a <LCD_Move_Right+0x3c>
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	ec 1b       	sub	r30, r28
 374:	fd 0b       	sbc	r31, r29
 376:	8f 2d       	mov	r24, r15
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	98 01       	movw	r18, r16
 37c:	2e 1b       	sub	r18, r30
 37e:	3f 0b       	sbc	r19, r31
 380:	82 17       	cp	r24, r18
 382:	93 07       	cpc	r25, r19
 384:	f0 f2       	brcs	.-68     	; 0x342 <LCD_Move_Right+0x14>
		LCD_GotoXY(0,i);
		LCD_WriteString(string);
		_delay_ms(500);
		LCD_clearScreen();
	}
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	08 95       	ret

00000392 <LCD_Move_Left>:
void LCD_Move_Left(uint8 string[])
{
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	8c 01       	movw	r16, r24
	uint8 i = 16 - strlen(string);
 39a:	fc 01       	movw	r30, r24
 39c:	01 90       	ld	r0, Z+
 39e:	00 20       	and	r0, r0
 3a0:	e9 f7       	brne	.-6      	; 0x39c <LCD_Move_Left+0xa>
 3a2:	c8 2f       	mov	r28, r24
 3a4:	ce 1b       	sub	r28, r30
 3a6:	cf 5e       	subi	r28, 0xEF	; 239
	for (i ; i >0  ;i--)
 3a8:	a1 f0       	breq	.+40     	; 0x3d2 <LCD_Move_Left+0x40>
}
void LCD_GotoXY(uint8 x, uint8 y)
{
	if (x == 0)
	{
		LCD_SendCommand(LCD_BEGIN_AT_FIRST_RAW + y);
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	8c 0f       	add	r24, r28
 3ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_SendCommand>
{
	uint8 i = 16 - strlen(string);
	for (i ; i >0  ;i--)
	{
		LCD_GotoXY(0,i);
		LCD_WriteString(string);
 3b2:	c8 01       	movw	r24, r16
 3b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
 3b8:	2f e9       	ldi	r18, 0x9F	; 159
 3ba:	86 e8       	ldi	r24, 0x86	; 134
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <LCD_Move_Left+0x2c>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_Move_Left+0x36>
 3c8:	00 00       	nop
		_delay_ms(500);
		LCD_clearScreen();
 3ca:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
	}
}
void LCD_Move_Left(uint8 string[])
{
	uint8 i = 16 - strlen(string);
	for (i ; i >0  ;i--)
 3ce:	c1 50       	subi	r28, 0x01	; 1
 3d0:	61 f7       	brne	.-40     	; 0x3aa <LCD_Move_Left+0x18>
		LCD_GotoXY(0,i);
		LCD_WriteString(string);
		_delay_ms(500);
		LCD_clearScreen();
	}
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <DIO_WritePinDir>:
		PORT_C |= val;   //set the value of the first 4 bit in port c
		break;
		case 'D':
		case 'd':
		PORT_D &= 0xF0; //clear the first 4 bit in port D
		PORT_D |= val;   //set the value of the first 4 bit in port D
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	e1 54       	subi	r30, 0x41	; 65
 3e0:	f1 09       	sbc	r31, r1
 3e2:	e4 32       	cpi	r30, 0x24	; 36
 3e4:	f1 05       	cpc	r31, r1
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <DIO_WritePinDir+0x10>
 3e8:	67 c0       	rjmp	.+206    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3ea:	e6 5d       	subi	r30, 0xD6	; 214
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	0c 94 84 04 	jmp	0x908	; 0x908 <__tablejump2__>
 3f2:	41 30       	cpi	r20, 0x01	; 1
 3f4:	59 f4       	brne	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	2a b3       	in	r18, 0x1a	; 26
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_WritePinDir+0x24>
 406:	82 2b       	or	r24, r18
 408:	8a bb       	out	0x1a, r24	; 26
 40a:	08 95       	ret
 40c:	2a b3       	in	r18, 0x1a	; 26
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	8a bb       	out	0x1a, r24	; 26
 422:	08 95       	ret
 424:	41 30       	cpi	r20, 0x01	; 1
 426:	59 f4       	brne	.+22     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 428:	27 b3       	in	r18, 0x17	; 23
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	87 bb       	out	0x17, r24	; 23
 43c:	08 95       	ret
 43e:	27 b3       	in	r18, 0x17	; 23
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	87 bb       	out	0x17, r24	; 23
 454:	08 95       	ret
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	59 f4       	brne	.+22     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 45a:	24 b3       	in	r18, 0x14	; 20
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	82 2b       	or	r24, r18
 46c:	84 bb       	out	0x14, r24	; 20
 46e:	08 95       	ret
 470:	24 b3       	in	r18, 0x14	; 20
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	84 bb       	out	0x14, r24	; 20
 486:	08 95       	ret
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	59 f4       	brne	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 48c:	21 b3       	in	r18, 0x11	; 17
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	81 bb       	out	0x11, r24	; 17
 4a0:	08 95       	ret
 4a2:	21 b3       	in	r18, 0x11	; 17
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b2:	80 95       	com	r24
 4b4:	82 23       	and	r24, r18
 4b6:	81 bb       	out	0x11, r24	; 17
 4b8:	08 95       	ret

000004ba <DIO_WritePin>:
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	e1 54       	subi	r30, 0x41	; 65
 4c0:	f1 09       	sbc	r31, r1
 4c2:	e4 32       	cpi	r30, 0x24	; 36
 4c4:	f1 05       	cpc	r31, r1
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <DIO_WritePin+0x10>
 4c8:	67 c0       	rjmp	.+206    	; 0x598 <DIO_WritePin+0xde>
 4ca:	e2 5b       	subi	r30, 0xB2	; 178
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	0c 94 84 04 	jmp	0x908	; 0x908 <__tablejump2__>
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	59 f4       	brne	.+22     	; 0x4ec <DIO_WritePin+0x32>
 4d6:	2b b3       	in	r18, 0x1b	; 27
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_WritePin+0x28>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_WritePin+0x24>
 4e6:	82 2b       	or	r24, r18
 4e8:	8b bb       	out	0x1b, r24	; 27
 4ea:	08 95       	ret
 4ec:	2b b3       	in	r18, 0x1b	; 27
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_WritePin+0x3e>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_WritePin+0x3a>
 4fc:	80 95       	com	r24
 4fe:	82 23       	and	r24, r18
 500:	8b bb       	out	0x1b, r24	; 27
 502:	08 95       	ret
 504:	41 30       	cpi	r20, 0x01	; 1
 506:	59 f4       	brne	.+22     	; 0x51e <DIO_WritePin+0x64>
 508:	28 b3       	in	r18, 0x18	; 24
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_WritePin+0x5a>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_WritePin+0x56>
 518:	82 2b       	or	r24, r18
 51a:	88 bb       	out	0x18, r24	; 24
 51c:	08 95       	ret
 51e:	28 b3       	in	r18, 0x18	; 24
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_WritePin+0x70>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_WritePin+0x6c>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	88 bb       	out	0x18, r24	; 24
 534:	08 95       	ret
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	59 f4       	brne	.+22     	; 0x550 <DIO_WritePin+0x96>
 53a:	25 b3       	in	r18, 0x15	; 21
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_WritePin+0x8c>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_WritePin+0x88>
 54a:	82 2b       	or	r24, r18
 54c:	85 bb       	out	0x15, r24	; 21
 54e:	08 95       	ret
 550:	25 b3       	in	r18, 0x15	; 21
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_WritePin+0xa2>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_WritePin+0x9e>
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	85 bb       	out	0x15, r24	; 21
 566:	08 95       	ret
 568:	41 30       	cpi	r20, 0x01	; 1
 56a:	59 f4       	brne	.+22     	; 0x582 <DIO_WritePin+0xc8>
 56c:	22 b3       	in	r18, 0x12	; 18
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_WritePin+0xbe>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_WritePin+0xba>
 57c:	82 2b       	or	r24, r18
 57e:	82 bb       	out	0x12, r24	; 18
 580:	08 95       	ret
 582:	22 b3       	in	r18, 0x12	; 18
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_WritePin+0xd4>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_WritePin+0xd0>
 592:	80 95       	com	r24
 594:	82 23       	and	r24, r18
 596:	82 bb       	out	0x12, r24	; 18
 598:	08 95       	ret

0000059a <Dio_WriteHighNibbleVal>:
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	fc 01       	movw	r30, r24
 59e:	e1 54       	subi	r30, 0x41	; 65
 5a0:	f1 09       	sbc	r31, r1
 5a2:	e4 32       	cpi	r30, 0x24	; 36
 5a4:	f1 05       	cpc	r31, r1
 5a6:	18 f5       	brcc	.+70     	; 0x5ee <Dio_WriteHighNibbleVal+0x54>
 5a8:	ee 58       	subi	r30, 0x8E	; 142
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	0c 94 84 04 	jmp	0x908	; 0x908 <__tablejump2__>
 5b0:	8b b3       	in	r24, 0x1b	; 27
 5b2:	8f 70       	andi	r24, 0x0F	; 15
 5b4:	8b bb       	out	0x1b, r24	; 27
 5b6:	8b b3       	in	r24, 0x1b	; 27
 5b8:	60 7f       	andi	r22, 0xF0	; 240
 5ba:	68 2b       	or	r22, r24
 5bc:	6b bb       	out	0x1b, r22	; 27
 5be:	08 95       	ret
 5c0:	88 b3       	in	r24, 0x18	; 24
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	88 bb       	out	0x18, r24	; 24
 5c6:	88 b3       	in	r24, 0x18	; 24
 5c8:	60 7f       	andi	r22, 0xF0	; 240
 5ca:	68 2b       	or	r22, r24
 5cc:	68 bb       	out	0x18, r22	; 24
 5ce:	08 95       	ret
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	60 7f       	andi	r22, 0xF0	; 240
 5da:	68 2b       	or	r22, r24
 5dc:	65 bb       	out	0x15, r22	; 21
 5de:	08 95       	ret
 5e0:	82 b3       	in	r24, 0x12	; 18
 5e2:	8f 70       	andi	r24, 0x0F	; 15
 5e4:	82 bb       	out	0x12, r24	; 18
 5e6:	82 b3       	in	r24, 0x12	; 18
 5e8:	60 7f       	andi	r22, 0xF0	; 240
 5ea:	68 2b       	or	r22, r24
 5ec:	62 bb       	out	0x12, r22	; 18
 5ee:	08 95       	ret

000005f0 <Dio_WriteHighNibbleDir>:
		break;
	}
}
void Dio_WriteHighNibbleDir(uint8 port, STD_Direction dir) 
{
	switch(port)
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	fc 01       	movw	r30, r24
 5f4:	e1 54       	subi	r30, 0x41	; 65
 5f6:	f1 09       	sbc	r31, r1
 5f8:	e4 32       	cpi	r30, 0x24	; 36
 5fa:	f1 05       	cpc	r31, r1
 5fc:	58 f5       	brcc	.+86     	; 0x654 <Dio_WriteHighNibbleDir+0x64>
 5fe:	ea 56       	subi	r30, 0x6A	; 106
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	0c 94 84 04 	jmp	0x908	; 0x908 <__tablejump2__>
	{
		case 'A':
		case 'a':
		if (dir == STD_IN)
 606:	61 11       	cpse	r22, r1
 608:	04 c0       	rjmp	.+8      	; 0x612 <Dio_WriteHighNibbleDir+0x22>
		{
			DDR_A &= 0x0F; //make the last 4 bit in port A are input 
 60a:	8a b3       	in	r24, 0x1a	; 26
 60c:	8f 70       	andi	r24, 0x0F	; 15
 60e:	8a bb       	out	0x1a, r24	; 26
 610:	08 95       	ret
		}
		else
		{
			DDR_A |= 0xF0; //set the direction of the last 4 bit in port A "output"
 612:	8a b3       	in	r24, 0x1a	; 26
 614:	80 6f       	ori	r24, 0xF0	; 240
 616:	8a bb       	out	0x1a, r24	; 26
 618:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (dir == STD_IN)
 61a:	61 11       	cpse	r22, r1
 61c:	04 c0       	rjmp	.+8      	; 0x626 <Dio_WriteHighNibbleDir+0x36>
		{
			DDR_B &= 0x0F; //make the last 4 bit in port B are input 
 61e:	87 b3       	in	r24, 0x17	; 23
 620:	8f 70       	andi	r24, 0x0F	; 15
 622:	87 bb       	out	0x17, r24	; 23
 624:	06 c0       	rjmp	.+12     	; 0x632 <Dio_WriteHighNibbleDir+0x42>
		}
		else
		{
			DDR_B |= 0xF0;   //set the direction of the last 4 bit in port B "output"
 626:	87 b3       	in	r24, 0x17	; 23
 628:	80 6f       	ori	r24, 0xF0	; 240
 62a:	87 bb       	out	0x17, r24	; 23
 62c:	06 c0       	rjmp	.+12     	; 0x63a <Dio_WriteHighNibbleDir+0x4a>
		}
		
		
		case 'C':
		case 'c':
		if (dir == STD_IN)
 62e:	61 11       	cpse	r22, r1
 630:	04 c0       	rjmp	.+8      	; 0x63a <Dio_WriteHighNibbleDir+0x4a>
		{
			DDR_C &= 0x0F; //make the last 4 bit in port C are input
 632:	84 b3       	in	r24, 0x14	; 20
 634:	8f 70       	andi	r24, 0x0F	; 15
 636:	84 bb       	out	0x14, r24	; 20
 638:	08 95       	ret
		}
		else
		{
			DDR_C |= 0xF0; //set the direction of the last 4 bit in port C "output"
 63a:	84 b3       	in	r24, 0x14	; 20
 63c:	80 6f       	ori	r24, 0xF0	; 240
 63e:	84 bb       	out	0x14, r24	; 20
 640:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (dir == STD_IN)
 642:	61 11       	cpse	r22, r1
 644:	04 c0       	rjmp	.+8      	; 0x64e <Dio_WriteHighNibbleDir+0x5e>
		{
			DDR_D &= 0x0F; //make the last 4 bit in port D are input
 646:	81 b3       	in	r24, 0x11	; 17
 648:	8f 70       	andi	r24, 0x0F	; 15
 64a:	81 bb       	out	0x11, r24	; 17
 64c:	08 95       	ret
		}
		else
		{
			DDR_D |= 0xF0;   //set the direction of the last 4 bit in port D "output"
 64e:	81 b3       	in	r24, 0x11	; 17
 650:	80 6f       	ori	r24, 0xF0	; 240
 652:	81 bb       	out	0x11, r24	; 17
 654:	08 95       	ret

00000656 <EXTI_setEdge>:
	#endif
	
}
void EXTI_setEdge(EXTI_IntType IntNum,EXTI_SenseControl SenseControl)
{
	switch(IntNum)
 656:	86 30       	cpi	r24, 0x06	; 6
 658:	31 f0       	breq	.+12     	; 0x666 <EXTI_setEdge+0x10>
 65a:	87 30       	cpi	r24, 0x07	; 7
 65c:	31 f1       	breq	.+76     	; 0x6aa <EXTI_setEdge+0x54>
 65e:	85 30       	cpi	r24, 0x05	; 5
 660:	09 f0       	breq	.+2      	; 0x664 <EXTI_setEdge+0xe>
 662:	4e c0       	rjmp	.+156    	; 0x700 <EXTI_setEdge+0xaa>
 664:	44 c0       	rjmp	.+136    	; 0x6ee <EXTI_setEdge+0x98>
	{
		case EXTI_INT0 :
		if (SenseControl == EXTI_Low_Level)
 666:	61 11       	cpse	r22, r1
 668:	07 c0       	rjmp	.+14     	; 0x678 <EXTI_setEdge+0x22>
		{
			CLEAR_Bit(MCUCR,ISC00);
 66a:	85 b7       	in	r24, 0x35	; 53
 66c:	8e 7f       	andi	r24, 0xFE	; 254
 66e:	85 bf       	out	0x35, r24	; 53
			CLEAR_Bit(MCUCR,ISC01);
 670:	85 b7       	in	r24, 0x35	; 53
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	85 bf       	out	0x35, r24	; 53
 676:	08 95       	ret
		}
		else if (SenseControl == EXTI_OnChange_Edge )
 678:	61 30       	cpi	r22, 0x01	; 1
 67a:	39 f4       	brne	.+14     	; 0x68a <EXTI_setEdge+0x34>
		{
			SET_Bit(MCUCR,ISC00);
 67c:	85 b7       	in	r24, 0x35	; 53
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	85 bf       	out	0x35, r24	; 53
			CLEAR_Bit(MCUCR,ISC01);
 682:	85 b7       	in	r24, 0x35	; 53
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	85 bf       	out	0x35, r24	; 53
 688:	08 95       	ret
		}
			
		else if (SenseControl == EXTI_Falling_Edge ) 
 68a:	62 30       	cpi	r22, 0x02	; 2
 68c:	39 f4       	brne	.+14     	; 0x69c <EXTI_setEdge+0x46>
		{
			CLEAR_Bit(MCUCR,ISC00);
 68e:	85 b7       	in	r24, 0x35	; 53
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	85 bf       	out	0x35, r24	; 53
			SET_Bit(MCUCR,ISC01);
 694:	85 b7       	in	r24, 0x35	; 53
 696:	82 60       	ori	r24, 0x02	; 2
 698:	85 bf       	out	0x35, r24	; 53
 69a:	08 95       	ret
		}
		else
		{
			SET_Bit(MCUCR,ISC00);
 69c:	85 b7       	in	r24, 0x35	; 53
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	85 bf       	out	0x35, r24	; 53
			SET_Bit(MCUCR,ISC01);
 6a2:	85 b7       	in	r24, 0x35	; 53
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	85 bf       	out	0x35, r24	; 53
 6a8:	08 95       	ret
		}
		break;
		
		case EXTI_INT1 :
		if (SenseControl == EXTI_Low_Level)
 6aa:	61 11       	cpse	r22, r1
 6ac:	07 c0       	rjmp	.+14     	; 0x6bc <EXTI_setEdge+0x66>
		{
			CLEAR_Bit(MCUCR,ISC10);
 6ae:	85 b7       	in	r24, 0x35	; 53
 6b0:	8b 7f       	andi	r24, 0xFB	; 251
 6b2:	85 bf       	out	0x35, r24	; 53
			CLEAR_Bit(MCUCR,ISC11);
 6b4:	85 b7       	in	r24, 0x35	; 53
 6b6:	87 7f       	andi	r24, 0xF7	; 247
 6b8:	85 bf       	out	0x35, r24	; 53
 6ba:	08 95       	ret
		}
		else if (SenseControl == EXTI_OnChange_Edge )
 6bc:	61 30       	cpi	r22, 0x01	; 1
 6be:	39 f4       	brne	.+14     	; 0x6ce <EXTI_setEdge+0x78>
		{
			SET_Bit(MCUCR,ISC10);
 6c0:	85 b7       	in	r24, 0x35	; 53
 6c2:	84 60       	ori	r24, 0x04	; 4
 6c4:	85 bf       	out	0x35, r24	; 53
			CLEAR_Bit(MCUCR,ISC11);
 6c6:	85 b7       	in	r24, 0x35	; 53
 6c8:	87 7f       	andi	r24, 0xF7	; 247
 6ca:	85 bf       	out	0x35, r24	; 53
 6cc:	08 95       	ret
		}
		
		else if (SenseControl == EXTI_Falling_Edge )
 6ce:	62 30       	cpi	r22, 0x02	; 2
 6d0:	39 f4       	brne	.+14     	; 0x6e0 <EXTI_setEdge+0x8a>
		{
			CLEAR_Bit(MCUCR,ISC10);
 6d2:	85 b7       	in	r24, 0x35	; 53
 6d4:	8b 7f       	andi	r24, 0xFB	; 251
 6d6:	85 bf       	out	0x35, r24	; 53
			SET_Bit(MCUCR,ISC11);
 6d8:	85 b7       	in	r24, 0x35	; 53
 6da:	88 60       	ori	r24, 0x08	; 8
 6dc:	85 bf       	out	0x35, r24	; 53
 6de:	08 95       	ret
		}
		else
		{
			SET_Bit(MCUCR,ISC10);
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	84 60       	ori	r24, 0x04	; 4
 6e4:	85 bf       	out	0x35, r24	; 53
			SET_Bit(MCUCR,ISC11);
 6e6:	85 b7       	in	r24, 0x35	; 53
 6e8:	88 60       	ori	r24, 0x08	; 8
 6ea:	85 bf       	out	0x35, r24	; 53
 6ec:	08 95       	ret
		}
		break;
		
		case EXTI_INT2 :
		if (SenseControl == EXTI_Falling_Edge )
 6ee:	62 30       	cpi	r22, 0x02	; 2
 6f0:	21 f4       	brne	.+8      	; 0x6fa <EXTI_setEdge+0xa4>
		{
			CLEAR_Bit(MCUCSR,ISC2);
 6f2:	84 b7       	in	r24, 0x34	; 52
 6f4:	8f 7b       	andi	r24, 0xBF	; 191
 6f6:	84 bf       	out	0x34, r24	; 52
 6f8:	08 95       	ret
		} 
		else
		{
			SET_Bit(MCUCSR,ISC2);
 6fa:	84 b7       	in	r24, 0x34	; 52
 6fc:	80 64       	ori	r24, 0x40	; 64
 6fe:	84 bf       	out	0x34, r24	; 52
 700:	08 95       	ret

00000702 <EXTI_enInterrupt>:
	}
	
}
void EXTI_enInterrupt(EXTI_IntType IntNum)
{
	switch(IntNum)
 702:	86 30       	cpi	r24, 0x06	; 6
 704:	29 f0       	breq	.+10     	; 0x710 <EXTI_enInterrupt+0xe>
 706:	87 30       	cpi	r24, 0x07	; 7
 708:	39 f0       	breq	.+14     	; 0x718 <EXTI_enInterrupt+0x16>
 70a:	85 30       	cpi	r24, 0x05	; 5
 70c:	61 f4       	brne	.+24     	; 0x726 <EXTI_enInterrupt+0x24>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <EXTI_enInterrupt+0x1e>
	{
		case EXTI_INT0 :
		SET_Bit(GICR,EXTI_INT0);
 710:	8b b7       	in	r24, 0x3b	; 59
 712:	80 64       	ori	r24, 0x40	; 64
 714:	8b bf       	out	0x3b, r24	; 59
		break;
 716:	08 95       	ret
		case EXTI_INT1 :
		SET_Bit(GICR,EXTI_INT1);
 718:	8b b7       	in	r24, 0x3b	; 59
 71a:	80 68       	ori	r24, 0x80	; 128
 71c:	8b bf       	out	0x3b, r24	; 59
		break;
 71e:	08 95       	ret
		case EXTI_INT2 :
		SET_Bit(GICR,EXTI_INT2);
 720:	8b b7       	in	r24, 0x3b	; 59
 722:	80 62       	ori	r24, 0x20	; 32
 724:	8b bf       	out	0x3b, r24	; 59
 726:	08 95       	ret

00000728 <EXTI_init>:
 */ 
#include "EXTI.h"
void EXTI_init(void)
{
	#if (EXTI_INT0_EN == ENABLE)
	EXTI_setEdge(EXTI_INT0,EXTI_Rising_Edge);
 728:	63 e0       	ldi	r22, 0x03	; 3
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	0e 94 2b 03 	call	0x656	; 0x656 <EXTI_setEdge>
	EXTI_enInterrupt(EXTI_INT0);
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	0e 94 81 03 	call	0x702	; 0x702 <EXTI_enInterrupt>

	#endif
	
	#if (EXTI_INT1_EN == ENABLE)
	EXTI_setEdge(EXTI_INT1,EXTI_Rising_Edge);
 736:	63 e0       	ldi	r22, 0x03	; 3
 738:	87 e0       	ldi	r24, 0x07	; 7
 73a:	0e 94 2b 03 	call	0x656	; 0x656 <EXTI_setEdge>
	EXTI_enInterrupt(EXTI_INT1);
 73e:	87 e0       	ldi	r24, 0x07	; 7
 740:	0e 94 81 03 	call	0x702	; 0x702 <EXTI_enInterrupt>
 744:	08 95       	ret

00000746 <main>:
#include "Driver/MCAL/External_Interrupt/EXTI.h"
#define MAX  10
uint8 counter = 0;
uint8 str[] = "No.of cars is ";
int main(void)
{	 
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	27 97       	sbiw	r28, 0x07	; 7
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
	///initialize LCD
	LCD_init();
 75a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_init>
	///initialize External interrupt 
	EXTI_init();
 75e:	0e 94 94 03 	call	0x728	; 0x728 <EXTI_init>
	sei();
 762:	78 94       	sei
	///initialize red alarm 
	DIO_WritePinDir('A',0,STD_OUT);
 764:	41 e0       	ldi	r20, 0x01	; 1
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	81 e4       	ldi	r24, 0x41	; 65
 76a:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_WritePinDir>
	///set the message
	uint8 message[] = "Garage";
 76e:	87 e0       	ldi	r24, 0x07	; 7
 770:	ef e6       	ldi	r30, 0x6F	; 111
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	de 01       	movw	r26, r28
 776:	11 96       	adiw	r26, 0x01	; 1
 778:	01 90       	ld	r0, Z+
 77a:	0d 92       	st	X+, r0
 77c:	8a 95       	dec	r24
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x32>
	

	while(1)
	{
		LCD_Move_Right(message);
 780:	ce 01       	movw	r24, r28
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_Move_Right>
		LCD_Move_Left(message);
 788:	ce 01       	movw	r24, r28
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Move_Left>
 790:	f7 cf       	rjmp	.-18     	; 0x780 <main+0x3a>

00000792 <__vector_1>:
	}
	
}
///new car enters the garage
ISR( INT0_vect )
{
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
		++counter;
 7b4:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__data_end>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	89 0f       	add	r24, r25
 7bc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
		 if( (counter) <= MAX)
 7c0:	8b 30       	cpi	r24, 0x0B	; 11
 7c2:	58 f5       	brcc	.+86     	; 0x81a <__vector_1+0x88>

		{
				LCD_clearScreen();
 7c4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
				LCD_WriteString("A new car enters");
 7c8:	86 e7       	ldi	r24, 0x76	; 118
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
				LCD_GotoXY(1,0);
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_GotoXY>
				LCD_WriteString(str);
 7d8:	80 e6       	ldi	r24, 0x60	; 96
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
				LCD_SendNumber(counter);
 7e0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendNumber>
				DIO_WritePin('a',0,STD_low);
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	81 e6       	ldi	r24, 0x61	; 97
 7f0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
				 if ((counter) == MAX)
 7f4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 7f8:	8a 30       	cpi	r24, 0x0A	; 10
 7fa:	29 f4       	brne	.+10     	; 0x806 <__vector_1+0x74>
				{
				    DIO_WritePin('a',0,STD_high);
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	81 e6       	ldi	r24, 0x61	; 97
 802:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 806:	2f e3       	ldi	r18, 0x3F	; 63
 808:	8d e0       	ldi	r24, 0x0D	; 13
 80a:	93 e0       	ldi	r25, 0x03	; 3
 80c:	21 50       	subi	r18, 0x01	; 1
 80e:	80 40       	sbci	r24, 0x00	; 0
 810:	90 40       	sbci	r25, 0x00	; 0
 812:	e1 f7       	brne	.-8      	; 0x80c <__vector_1+0x7a>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__vector_1+0x84>
 816:	00 00       	nop
 818:	1e c0       	rjmp	.+60     	; 0x856 <__vector_1+0xc4>
				_delay_ms(1000);
		}

	    else if (counter > MAX)
	    {
				counter--;
 81a:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <__data_end>
				LCD_clearScreen();
 81e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
				LCD_WriteString("Sorry");
 822:	87 e8       	ldi	r24, 0x87	; 135
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
				LCD_GotoXY(1,0);
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_GotoXY>
				LCD_WriteString("Garage is full");
 832:	8d e8       	ldi	r24, 0x8D	; 141
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
				DIO_WritePin('a',0,STD_high);
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	81 e6       	ldi	r24, 0x61	; 97
 840:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
 844:	2f e3       	ldi	r18, 0x3F	; 63
 846:	8d e0       	ldi	r24, 0x0D	; 13
 848:	93 e0       	ldi	r25, 0x03	; 3
 84a:	21 50       	subi	r18, 0x01	; 1
 84c:	80 40       	sbci	r24, 0x00	; 0
 84e:	90 40       	sbci	r25, 0x00	; 0
 850:	e1 f7       	brne	.-8      	; 0x84a <__vector_1+0xb8>
 852:	00 c0       	rjmp	.+0      	; 0x854 <__vector_1+0xc2>
 854:	00 00       	nop
				_delay_ms(1000);
		}


	
}
 856:	ff 91       	pop	r31
 858:	ef 91       	pop	r30
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <__vector_2>:
ISR(INT1_vect)
{
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	2f 93       	push	r18
 884:	3f 93       	push	r19
 886:	4f 93       	push	r20
 888:	5f 93       	push	r21
 88a:	6f 93       	push	r22
 88c:	7f 93       	push	r23
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
 892:	af 93       	push	r26
 894:	bf 93       	push	r27
 896:	ef 93       	push	r30
 898:	ff 93       	push	r31

		DIO_WritePin('A',0,STD_low);
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	81 e4       	ldi	r24, 0x41	; 65
 8a0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_WritePin>
		LCD_clearScreen();
 8a4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
		LCD_WriteString("Empty place :");
 8a8:	8c e9       	ldi	r24, 0x9C	; 156
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
		LCD_GotoXY(1,0);
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_GotoXY>
		LCD_WriteString(str);
 8b8:	80 e6       	ldi	r24, 0x60	; 96
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteString>
		LCD_SendNumber(--counter);
 8c0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 8c4:	81 50       	subi	r24, 0x01	; 1
 8c6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendNumber>
 8d0:	2f e3       	ldi	r18, 0x3F	; 63
 8d2:	8d e0       	ldi	r24, 0x0D	; 13
 8d4:	93 e0       	ldi	r25, 0x03	; 3
 8d6:	21 50       	subi	r18, 0x01	; 1
 8d8:	80 40       	sbci	r24, 0x00	; 0
 8da:	90 40       	sbci	r25, 0x00	; 0
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <__vector_2+0x5e>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__vector_2+0x68>
 8e0:	00 00       	nop
		_delay_ms(1000);
		LCD_clearScreen();
 8e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_clearScreen>
 8e6:	ff 91       	pop	r31
 8e8:	ef 91       	pop	r30
 8ea:	bf 91       	pop	r27
 8ec:	af 91       	pop	r26
 8ee:	9f 91       	pop	r25
 8f0:	8f 91       	pop	r24
 8f2:	7f 91       	pop	r23
 8f4:	6f 91       	pop	r22
 8f6:	5f 91       	pop	r21
 8f8:	4f 91       	pop	r20
 8fa:	3f 91       	pop	r19
 8fc:	2f 91       	pop	r18
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <__tablejump2__>:
 908:	ee 0f       	add	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	05 90       	lpm	r0, Z+
 90e:	f4 91       	lpm	r31, Z
 910:	e0 2d       	mov	r30, r0
 912:	09 94       	ijmp

00000914 <itoa>:
 914:	45 32       	cpi	r20, 0x25	; 37
 916:	51 05       	cpc	r21, r1
 918:	20 f4       	brcc	.+8      	; 0x922 <itoa+0xe>
 91a:	42 30       	cpi	r20, 0x02	; 2
 91c:	10 f0       	brcs	.+4      	; 0x922 <itoa+0xe>
 91e:	0c 94 95 04 	jmp	0x92a	; 0x92a <__itoa_ncheck>
 922:	fb 01       	movw	r30, r22
 924:	10 82       	st	Z, r1
 926:	cb 01       	movw	r24, r22
 928:	08 95       	ret

0000092a <__itoa_ncheck>:
 92a:	bb 27       	eor	r27, r27
 92c:	4a 30       	cpi	r20, 0x0A	; 10
 92e:	31 f4       	brne	.+12     	; 0x93c <__itoa_ncheck+0x12>
 930:	99 23       	and	r25, r25
 932:	22 f4       	brpl	.+8      	; 0x93c <__itoa_ncheck+0x12>
 934:	bd e2       	ldi	r27, 0x2D	; 45
 936:	90 95       	com	r25
 938:	81 95       	neg	r24
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__utoa_common>

00000940 <__utoa_ncheck>:
 940:	bb 27       	eor	r27, r27

00000942 <__utoa_common>:
 942:	fb 01       	movw	r30, r22
 944:	55 27       	eor	r21, r21
 946:	aa 27       	eor	r26, r26
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	aa 1f       	adc	r26, r26
 94e:	a4 17       	cp	r26, r20
 950:	10 f0       	brcs	.+4      	; 0x956 <__utoa_common+0x14>
 952:	a4 1b       	sub	r26, r20
 954:	83 95       	inc	r24
 956:	50 51       	subi	r21, 0x10	; 16
 958:	b9 f7       	brne	.-18     	; 0x948 <__utoa_common+0x6>
 95a:	a0 5d       	subi	r26, 0xD0	; 208
 95c:	aa 33       	cpi	r26, 0x3A	; 58
 95e:	08 f0       	brcs	.+2      	; 0x962 <__utoa_common+0x20>
 960:	a9 5d       	subi	r26, 0xD9	; 217
 962:	a1 93       	st	Z+, r26
 964:	00 97       	sbiw	r24, 0x00	; 0
 966:	79 f7       	brne	.-34     	; 0x946 <__utoa_common+0x4>
 968:	b1 11       	cpse	r27, r1
 96a:	b1 93       	st	Z+, r27
 96c:	11 92       	st	Z+, r1
 96e:	cb 01       	movw	r24, r22
 970:	0c 94 ba 04 	jmp	0x974	; 0x974 <strrev>

00000974 <strrev>:
 974:	dc 01       	movw	r26, r24
 976:	fc 01       	movw	r30, r24
 978:	67 2f       	mov	r22, r23
 97a:	71 91       	ld	r23, Z+
 97c:	77 23       	and	r23, r23
 97e:	e1 f7       	brne	.-8      	; 0x978 <strrev+0x4>
 980:	32 97       	sbiw	r30, 0x02	; 2
 982:	04 c0       	rjmp	.+8      	; 0x98c <strrev+0x18>
 984:	7c 91       	ld	r23, X
 986:	6d 93       	st	X+, r22
 988:	70 83       	st	Z, r23
 98a:	62 91       	ld	r22, -Z
 98c:	ae 17       	cp	r26, r30
 98e:	bf 07       	cpc	r27, r31
 990:	c8 f3       	brcs	.-14     	; 0x984 <strrev+0x10>
 992:	08 95       	ret

00000994 <_exit>:
 994:	f8 94       	cli

00000996 <__stop_program>:
 996:	ff cf       	rjmp	.-2      	; 0x996 <__stop_program>
